; (println (take 25 (map #(* % %) (range))))

; (                      ; начало списка № 1.
;     println            ; имя функции.
;     (                  ; начало списка № 2.
;         take           ; имя функции.
;         25             ;
;         (              ; начало списка № 3.
;             map        ; имя функции.
;             #(         ; интерпретировать следующий список № 4 как функцию.
;                 *      ; имя функции умножения.
;                 %      ; первый аргумент функции.
;                 %      ; первый аргумент функции.
;             )          ; конец списка № 4.
;             (          ; начало списка № 5.
;                 range  ; имя функции.
;             )          ; конец списка № 5.
;         )              ; конец списка № 3.
;     )                  ; конец списка № 2.
; )                      ; конец списка № 1.

; ВЫВОД:
; (0 1 4 9 16 25 36 49 64 81 100 121 144 169 196 225 256 289 324 361 400 441 484 529 576)




(defn square [x] (* x x))

; (
;     defn    ; "функция" (на самом деле нет) определяющая новую функцию.
;     square  ; имя новой функции.
;     [       ; начало вектора.
;         x   ; функция требует один аргумент с именем x.
;     ]       ; конец вектора.
;     (
;         *
;         x
;         x
;     )
; )

(println (take 25 (map square (range))))
